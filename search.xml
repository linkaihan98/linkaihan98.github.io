<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TypeScript学习总结</title>
    <url>/2020/07/12/TypeScript%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<hr>
<p>title: TypeScript学习总结<br>date: 2020-07-15 22:03:26<br>categories: </p>
<ul>
<li>TypeScript<br>tags:</li>
<li>TypeScript</li>
<li>JavaScript</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>audio自定义进度条控件</title>
    <url>/2020/07/14/audio%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>我们都知道，audio 标签声明<code>controls</code> 属性时，则音频播放控件为浏览器默认样式。如果未设置<code>controls</code>属性，则采用作者设置的脚本控件。</p>
<h3 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h3><h4 id="Audio-对象属性"><a href="#Audio-对象属性" class="headerlink" title="Audio 对象属性"></a>Audio 对象属性</h4><style> table th:first-of-type { width: 150px; } </style>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">duration（只读）</td>
<td>双精度浮点值，返回当前音频的长度（以秒计）。如果未设置音频，则返回 NaN</td>
</tr>
<tr>
<td align="center">currentTime</td>
<td>双精度浮点值，设置或返回音频中的当前播放位置（以秒计）。</td>
</tr>
</tbody></table>
<h4 id="相关接口"><a href="#相关接口" class="headerlink" title="相关接口"></a>相关接口</h4><table>
<thead>
<tr>
<th align="center">属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MouseEvent.offsetX</td>
<td>鼠标指针相对于目标节点内边位置的X坐标。</td>
</tr>
<tr>
<td align="center">Element.clientWidth</td>
<td>表示元素的内部宽度，以像素计。该属性包括内边距 padding，但不包括边框 border、外边距 margin。</td>
</tr>
</tbody></table>
<h3 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h3><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"music.mp3"</span> <span class="attr">id</span>=<span class="string">"audio"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-container"</span> <span class="attr">id</span>=<span class="string">"progress-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span> <span class="attr">id</span>=<span class="string">"progress"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.progress-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6b3a6</span>;</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">0.1s</span> linear;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实时更新进度条</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateProgress</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = e.target || e.srcElement;</span><br><span class="line">  <span class="keyword">const</span> &#123; duration, currentTime &#125; = target;</span><br><span class="line">  <span class="comment">//当前播放进度百分比</span></span><br><span class="line">  <span class="keyword">const</span> progressPercent = (currentTime / duration) * <span class="number">100</span>;</span><br><span class="line">  <span class="comment">//定义进度条div的宽度</span></span><br><span class="line">  progress.style.width = <span class="string">`<span class="subst">$&#123;progressPercent&#125;</span>%`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置进度条</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setProgress</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = <span class="keyword">this</span>.clientWidth;</span><br><span class="line">  <span class="keyword">const</span> clickX = e.offsetX;</span><br><span class="line">  <span class="keyword">const</span> duration = audio.duration;</span><br><span class="line">  <span class="comment">//计算鼠标点击时指针在progressContainer内的宽度百分比，返回该位置对应的播放进度</span></span><br><span class="line">  audio.currentTime = (clickX / width) * duration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加监听器</span></span><br><span class="line">audio.addEventListener(<span class="string">'timeupdate'</span>, updateProgress, <span class="literal">false</span>);</span><br><span class="line">progressContainer.addEventListener(<span class="string">'click'</span>, setProgress, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DOM</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>DOM</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>『 Vue风格规范 』（一）避免v-if和v-for一起使用</title>
    <url>/2020/07/12/%E3%80%8E%20Vue%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83%20%E3%80%8F%EF%BC%88%E4%B8%80%EF%BC%89%E9%81%BF%E5%85%8Dv-if%E5%92%8Cv-for%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Vue.js官方文档-风格指南中明确要求：</p>
<blockquote>
<p><strong>永远不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上。</strong></p>
</blockquote>
<p>一般我们在两种常见的情况下会倾向于这样做：</p>
<ul>
<li>为了过滤一个列表中的项目 (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>)。在这种情形下，请将 <code>users</code>替换为一个计算属性 (比如 <code>activeUsers</code>)，返回过滤后的列表。</li>
<li>为了避免渲染本应该被隐藏的列表 (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>)。这种情形下，请将 <code>v-if</code>移动至容器元素上 (比如 <code>ul</code>、<code>ol</code>)。</li>
</ul>
<p>第一种情况中，由于<code>v-for</code>比<code>v-if</code>具有更高的优先级，即使我们只需渲染列表中的一小部分元素，也要在重渲染时对整个列表进行一次遍历，而不考虑各子节点是否发生了变化。因此，我们对该列表的过滤可以通过计算属性来实现，优势有以下几点：</p>
<ul>
<li>计算属性是基于它们的依赖进行缓存的，只有在它的相关依赖发生改变时才会重新求值。那么若列表的数据不发生改变，过滤后的列表将通过计算属性进行缓存。</li>
<li>只对过滤后的列表进行遍历、渲染，提高性能。</li>
<li>解耦渲染层的逻辑，可维护性更强。</li>
</ul>
<p>如，以下这段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"user in users"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">"user.isActive"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"user.id"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>应更改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"user in activeUsers"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"user.id"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以及：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    activeUsers: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.users.filter(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">            user.isActive;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>第二种情况中，我们需将<code>v-if</code>移动到容器元素，则<code>shouldShowUsers</code>为false的列表不会被<code>v-for</code>遍历。示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"user in users"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">"shouldShowUsers"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"user.id"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"shouldShowUsers"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"user in users"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"user.id"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参考资料：<br>[1] <a href="https://cn.vuejs.org/v2/style-guide/" target="_blank" rel="noopener" title="标题">Vue.js官方文档</a></p>
]]></content>
      <categories>
        <category>Vue风格规范</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
